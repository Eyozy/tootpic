---
import Layout from '../layouts/Layout.astro';
import TemplateSelector from '../components/TemplateSelector.astro';
import { templateManager } from '../utils/templateManager';
import { imageGenerator } from '../utils/imageGenerator';
import { domCache } from '../utils/domCache';
import { resourceLoader } from '../utils/resourceLoader';
import { API_CONFIG, DEFAULT_TEMPLATE_ID } from '../constants';
import { Image } from 'astro:assets';
---

<Layout>
    <main class="w-full max-w-[670px] mx-auto flex flex-col items-center gap-5">
        <header class="text-center w-full space-y-3 mb-1">
            <div class="flex items-center justify-center gap-3 md:gap-4">
                <Image src="/favicon.svg" alt="TootPic Logo" width={48} height={48} loading="eager" class="w-10 h-10 md:w-12 md:h-12" />
                <h1 class="text-4xl md:text-5xl font-bold text-brand-gray-900 tracking-tight">
                    TootPic
                </h1>
            </div>
            <p class="text-base md:text-lg text-brand-gray-600 max-w-xl mx-auto">
                Transform your Mastodon posts into beautiful, shareable images.
            </p>
        </header>

        <div class="w-full space-y-4">
            <div class="w-full relative">
                <label for="mastodon-url" class="sr-only">Mastodon Post URL</label>
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                    </svg>
                </div>
                <input type="url" name="mastodon-url" id="mastodon-url" placeholder="https://mastodon.social/@user/123456789..." class="w-full pl-12 pr-12 py-3 border border-brand-gray-300 rounded-lg bg-white shadow-sm transition focus:outline-none focus:ring-0 focus:border-brand-blue" autocomplete="url" aria-required="true">
                <button id="clear-url-btn" class="absolute inset-y-0 right-0 pr-4 items-center hidden" aria-label="Clear URL">
                    <svg class="h-5 w-5 text-gray-400 hover:text-gray-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <button id="generate-btn" class="w-full bg-brand-blue text-white font-semibold py-3 px-4 rounded-lg hover:bg-brand-blue-dark transition-all shadow-sm hover:shadow-md disabled:bg-brand-gray-400 disabled:cursor-not-allowed">
                Generate Preview
            </button>
            <div id="error-message" class="text-red-500 text-sm text-center min-h-[1.25rem]" role="alert" aria-live="polite"></div>
        </div>

        <div class="w-full space-y-5">
            <div class="bg-white border border-brand-gray-200 rounded-xl shadow-sm">
                <button id="template-toggle" class="w-full flex items-center justify-between p-5">
                    <h3 class="text-base font-semibold text-brand-gray-900">Choose Template</h3>
                    <div class="flex items-center gap-3">
                        <span id="current-template-name" class="text-sm text-brand-gray-600" data-template-id="classic">Classic</span>
                        <svg class="w-5 h-5 text-brand-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                    </div>
                </button>
            </div>

            <div class="bg-white border border-brand-gray-200 rounded-xl shadow-sm">
                <button id="options-toggle" class="w-full flex items-center justify-between p-5" aria-expanded="false" aria-controls="options-content">
                    <h2 class="text-base font-semibold text-brand-gray-900">Content Settings</h2>
                    <svg id="options-icon" class="w-5 h-5 text-brand-gray-500 transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                    </svg>
                </button>
                <div id="options-content" class="accordion-content hidden">
                    <div class="px-5 pb-5 space-y-4 border-t border-brand-gray-100 pt-5">
                        <div class="flex items-center justify-between">
                            <label for="stats-toggle" class="text-brand-gray-700 cursor-pointer pr-4">Show Stats</label>
                            <label for="stats-toggle" class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" name="visibility" id="stats-toggle" value="stats" class="sr-only peer" checked>
                                <div class="toggle-bg w-11 h-6 bg-brand-gray-200 rounded-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-brand-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-brand-blue"></div>
                                <span class="sr-only">Toggle stats visibility</span>
                            </label>
                        </div>
                        <div class="flex items-center justify-between">
                            <label for="timestamp-toggle" class="text-brand-gray-700 cursor-pointer pr-4">Show Timestamp</label>
                            <label for="timestamp-toggle" class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" name="visibility" id="timestamp-toggle" value="timestamp" class="sr-only peer" checked>
                                <div class="toggle-bg w-11 h-6 bg-brand-gray-200 rounded-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-brand-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-brand-blue"></div>
                                <span class="sr-only">Toggle timestamp visibility</span>
                            </label>
                        </div>
                        <div class="flex items-center justify-between" id="instance-toggle-container">
                            <label for="instance-toggle" class="text-brand-gray-700 cursor-pointer pr-4">Show Instance Name</label>
                            <label for="instance-toggle" class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" name="visibility" id="instance-toggle" value="instance" class="sr-only peer" checked>
                                <div class="toggle-bg w-11 h-6 bg-brand-gray-200 rounded-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-brand-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-brand-blue"></div>
                                <span class="sr-only">Toggle instance name visibility</span>
                            </label>
                        </div>
                        <div class="flex items-center justify-between">
                            <label for="use-original-post-data" class="text-brand-gray-700 cursor-pointer pr-4">Use Original Post Data</label>
                            <label for="use-original-post-data" class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" name="original-post" id="use-original-post-data" class="sr-only peer" checked>
                                <div class="toggle-bg w-11 h-6 bg-brand-gray-200 rounded-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-brand-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-brand-blue"></div>
                                <span class="sr-only">Toggle original post data usage</span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <div id="preview-area" class="w-full flex-col items-center space-y-4 hidden mb-8">
                <div class="w-full flex items-center justify-between mb-4">
                    <h2 class="text-lg font-semibold text-brand-gray-900">Preview</h2>
                    <div id="preview-status" class="text-sm text-brand-gray-600">Ready to generate</div>
                </div>
                <div id="image-container" class="w-full flex items-center justify-center">
                    <div id="loader" class="loader m-12 hidden"></div>
                    <div id="style-a-container" class="p-8 w-full h-full hidden flex-col preview-card border rounded-xl template-classic">
                        <div class="flex items-center mb-4">
                            <img id="style-a-avatar" class="w-12 h-12 rounded-lg mr-4" src="/favicon.svg" alt="User avatar" loading="eager" decoding="async" crossorigin="anonymous">
                            <div>
                                <div id="style-a-display-name" class="font-bold text-primary text-base"></div>
                                <div id="style-a-username" class="text-sm text-secondary"></div>
                            </div>
                        </div>
                        <div id="style-a-content" class="text-primary text-base flex-grow content-container"></div>
                        <div id="style-a-attachment" class="mt-3 rounded-lg overflow-hidden border bg-gray-100"></div>
                        <div id="bottom-section" class="mt-4 pt-4 border-t">
                            <div id="style-a-timestamp" class="text-sm text-secondary mb-3"></div>
                            <div id="style-a-stats" class="flex items-center space-x-6 text-secondary text-sm">
                                <span class="flex items-center">
                                    <svg class="w-5 h-5 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                                        <circle cx="8" cy="12" r="1" fill="currentColor" stroke="none"/>
                                        <circle cx="12" cy="12" r="1" fill="currentColor" stroke="none"/>
                                        <circle cx="16" cy="12" r="1" fill="currentColor" stroke="none"/>
                                    </svg>
                                    <span id="style-a-replies"></span>
                                </span>
                                <span class="flex items-center">
                                    <svg class="w-5 h-5 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path>
                                    </svg>
                                    <span id="style-a-boosts"></span>
                                </span>
                                <span class="flex items-center">
                                    <svg class="w-5 h-5 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.196-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.783-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                                    </svg>
                                    <span id="style-a-favs"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <button id="download-btn" class="w-full bg-brand-blue text-white font-semibold py-3 px-4 rounded-lg hover:bg-brand-blue-dark transition-all shadow-sm hover:shadow-md disabled:bg-brand-gray-400 disabled:cursor-not-allowed" disabled>
                    <svg class="inline-block w-5 h-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    Download Image
                </button>
            </div>
        </div>
    </main>

    <!-- Template Modal -->
    <TemplateSelector selectedTemplateId={DEFAULT_TEMPLATE_ID} />

    <script>
    import { templateManager } from '../utils/templateManager';
    import { imageGenerator } from '../utils/imageGenerator';
    import { domCache } from '../utils/domCache';
    import { resourceLoader } from '../utils/resourceLoader';
    import { TEMPLATE_NAMES } from '../constants';

    declare var htmlToImage: any;

    document.addEventListener('DOMContentLoaded', () => {
        const urlInput = domCache.getElement('mastodon-url') as HTMLInputElement;
        const generateBtn = domCache.getElement('generate-btn') as HTMLButtonElement;
        const downloadBtn = domCache.getElement('download-btn') as HTMLButtonElement;
        const errorMessage = domCache.getElement('error-message') as HTMLDivElement;
        const previewArea = domCache.getElement('preview-area') as HTMLDivElement;
        const loader = domCache.getElement('loader') as HTMLDivElement;
        const styleAContainer = domCache.getElement('style-a-container') as HTMLDivElement;
        const clearUrlBtn = domCache.getElement('clear-url-btn') as HTMLButtonElement;

        const visibilityCheckboxes = document.querySelectorAll<HTMLInputElement>('input[name="visibility"]');
        const useOriginalPostDataCheckbox = domCache.getElement('use-original-post-data') as HTMLInputElement;
        const instanceToggleContainer = domCache.getElement('instance-toggle-container') as HTMLDivElement;

        const templateToggle = domCache.getElement('template-toggle') as HTMLButtonElement;

        const optionsToggle = domCache.getElement('options-toggle') as HTMLButtonElement;
        const optionsContent = domCache.getElement('options-content') as HTMLDivElement;
        const optionsIcon = domCache.getElement('options-icon') as SVGElement;
        const previewStatus = domCache.getElement('preview-status') as HTMLSpanElement;

let postData: any = null;
let fetchedInstance = '';
let visibility = {
    stats: true,
    timestamp: true,
    instance: true,
};

        let currentLoadController: AbortController | null = null;

        generateBtn?.addEventListener('click', fetchMastodonPost);

        urlInput?.addEventListener('input', toggleClearButtonVisibility);
        urlInput?.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && currentLoadController) {
                cancelCurrentLoad();
            }
        });
        clearUrlBtn?.addEventListener('click', clearUrlInput);

        function cancelCurrentLoad() {
            if (currentLoadController) {
                currentLoadController.abort();
                currentLoadController = null;

                if (generateBtn) {
                    generateBtn.disabled = false;
                    generateBtn.textContent = 'Generate Preview';
                }

                if (previewStatus) {
                    previewStatus.textContent = 'Loading cancelled';
                    previewStatus.className = 'text-sm text-gray-600';
                }

                resourceLoader.clearCache();
            }
        }
        downloadBtn?.addEventListener('click', async () => {
            try {
                await imageGenerator.generateAndDownload();
            } catch (error) {
                console.error('Download failed:', error);
                showError('Image generation failed. Please try again.');
            }
        });

        templateToggle?.addEventListener('click', () => {
            templateManager.openModal();
        });

        optionsToggle?.addEventListener('click', () => {
            toggleAccordion(optionsContent, optionsIcon, optionsToggle);
        });

        document.addEventListener('templateSelected', (e: any) => {
            if (postData) {
                updatePreview();
            }
        });

        try {
            templateManager.switchTemplate(templateManager.getCurrentTemplate());
        } catch (error) {
            console.error('Error initializing template manager:', error);
        }

        const allCheckboxes = [...visibilityCheckboxes, useOriginalPostDataCheckbox].filter(cb => cb !== null) as HTMLInputElement[];
        allCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                visibilityCheckboxes.forEach(cb => {
                    if (cb && cb.value) {
                        visibility[cb.value as keyof typeof visibility] = cb.checked;
                    }
                });
                if (postData) {
                    updatePreview();
                }
            });
        });

        function toggleAccordion(content: HTMLElement | null, icon: SVGElement | null, button: HTMLElement | null) {
            if (content && icon && button) {
                const isExpanded = button.getAttribute('aria-expanded') === 'true';
                button.setAttribute('aria-expanded', (!isExpanded).toString());
                icon.classList.toggle('rotate-180');
                content.classList.toggle('hidden');
            }
        }

        function setPreviewState(state: 'loading' | 'content' | 'error') {
            if (loader) loader.classList.add('hidden');
            if (styleAContainer) styleAContainer.classList.add('hidden');

            if (state === 'loading' && loader) {
                loader.classList.remove('hidden');
                if (previewStatus) previewStatus.textContent = 'Loading...';
            } else if (state === 'content' && styleAContainer) {
                styleAContainer.classList.remove('hidden');
                if (previewStatus) previewStatus.textContent = 'Preview loaded successfully';
                if (previewStatus) previewStatus.className = 'text-sm text-green-600';
            } else if (state === 'error' && previewStatus) {
                if (previewStatus) previewStatus.textContent = 'Error loading preview';
                if (previewStatus) previewStatus.className = 'text-sm text-red-600';
            }
        }

        function setGenerateButtonState(isLoading: boolean) {
            if (isLoading && generateBtn) {
                if (errorMessage) errorMessage.textContent = '';
                generateBtn.disabled = true;
                generateBtn.textContent = 'Fetching...';
            } else if (generateBtn) {
                generateBtn.disabled = false;
                generateBtn.textContent = 'Generate Preview';
            }
        }

        function showError(message: string) {
            if (errorMessage) errorMessage.textContent = message;
            if (previewArea) previewArea.classList.add('hidden');
            if (downloadBtn) downloadBtn.disabled = true;
            setPreviewState('error');
        }

        async function fetchMastodonPost() {
            if (!urlInput) return;
            const url = urlInput.value.trim();
            if (!url) {
                showError('Please enter a URL.');
                return;
            }

            let match;
            try {
                const urlObject = new URL(url);
                const pathParts = urlObject.pathname.split('/').filter(p => p);
                if (pathParts.length >= 2 && pathParts[0].startsWith('@')) {
                    match = { instance: urlObject.hostname, id: pathParts[1] };
                } else {
                    showError('Invalid URL format. Expected format: https://instance/@user/id');
                    return;
                }
            } catch(e) {
                showError('Invalid URL format.');
                return;
            }

            if (!match) {
                showError('Could not parse instance and post ID from URL.');
                return;
            }

            const { instance, id } = match;
            fetchedInstance = instance;
            const apiUrl = `https://cors.eu.org/https://${instance}/api/v1/statuses/${id}`;

            if (previewArea) previewArea.classList.remove('hidden');
            setGenerateButtonState(true);
            setPreviewState('loading');

            if (previewStatus) {
                previewStatus.textContent = 'Loading... (Press ESC to cancel)';
                previewStatus.className = 'text-sm text-blue-600';
            }

            try {
                const response = await fetch(apiUrl, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                if (!response.ok) {
                    if (response.status === 404) throw new Error('Post not found. Please check if the URL is correct and the post is public.');
                    throw new Error(`Network error: ${response.statusText}`);
                }
                postData = await response.json();

                const imageResources = resourceLoader.extractImageResources(postData);

                if (imageResources.length > 0) {
                    if (previewStatus) {
                        previewStatus.textContent = 'Loading images...';
                        previewStatus.className = 'text-sm text-blue-600';
                    }

                    try {
                        await resourceLoader.preloadImages(imageResources, {
                            timeout: 8000,
                            retryAttempts: 2,
                            retryDelay: 1000,
                            onProgress: (progress) => {
                                const statusText = `Loading images: ${progress.loaded}/${progress.total} (${progress.percentage}%)`;
                                if (previewStatus) previewStatus.textContent = statusText;
                            },
                            onResourceLoaded: (resource) => {
                                console.log(`Loaded ${resource.type}: ${resource.url}`);
                            },
                            onResourceFailed: (resource, error) => {
                                console.warn(`Failed to load ${resource.type}: ${resource.url}`, error);
                            }
                        });

                        const cacheStats = resourceLoader.getCacheStats();
                        const successRate = Math.round((cacheStats.size / imageResources.length) * 100);

                        if (successRate < 50) {
                            console.warn(`Low image loading success rate: ${successRate}%`);
                        }

                    } catch (preloadError) {
                        console.error('Image preloading failed:', preloadError);
                        if (previewStatus) {
                            previewStatus.textContent = 'Some images failed to load, continuing...';
                            previewStatus.className = 'text-sm text-yellow-600';
                        }
                    }
                } else {
                    if (previewStatus) {
                        previewStatus.textContent = 'Processing content...';
                        previewStatus.className = 'text-sm text-blue-600';
                    }
                }

                updatePreview();

                if (downloadBtn) downloadBtn.disabled = false;

            } catch (error) {
                showError(error instanceof Error ? error.message : 'An unknown error occurred');
                postData = null;
            } finally {
                setGenerateButtonState(false);
            }
        }

        function toggleClearButtonVisibility() {
            if (urlInput && clearUrlBtn) {
                if (urlInput.value.trim().length > 0) {
                    clearUrlBtn.classList.remove('hidden');
                } else {
                    clearUrlBtn.classList.add('hidden');
                }
            }
        }

        function clearUrlInput() {
            if (urlInput) {
                urlInput.value = '';
                toggleClearButtonVisibility();
                urlInput.focus();
            }
        }

        function updatePreview() {
            if (!postData || !useOriginalPostDataCheckbox || !styleAContainer) return;

            const useOriginal = useOriginalPostDataCheckbox.checked;
            const sourcePost = useOriginal && postData.reblog ? postData.reblog : postData;

            if (styleAContainer.classList.contains('hidden')) {
                styleAContainer.classList.remove('hidden');
            }

            const corsProxy = 'https://cors.eu.org/';

            const fragment = document.createDocumentFragment();

            let content = sourcePost.content;
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = content;
            const links = tempDiv.querySelectorAll('a');
            links.forEach(link => {
                if (!link.classList.contains('mention') && !link.classList.contains('hashtag')) {
                    link.classList.add('url');
                }
            });
            content = tempDiv.innerHTML;

            if (sourcePost.emojis) {
                sourcePost.emojis.forEach(emoji => {
                    const regex = new RegExp(`:${emoji.shortcode}:`, 'g');
                    const proxiedUrl = `${corsProxy}${emoji.url}`;

                    if (resourceLoader.isImageCached(emoji.url)) {
                        content = content.replace(regex, `<img src="${proxiedUrl}" alt=":${emoji.shortcode}:" class="custom-emoji" crossorigin="anonymous">`);
                    } else {
                        content = content.replace(regex, `:${emoji.shortcode}:`);
                    }
                });
            }

            const date = new Date(sourcePost.created_at);
            const formattedDate = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            const formattedTime = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });

            const updates: Array<() => void> = [];

            const avatarEl = document.getElementById('style-a-avatar') as HTMLImageElement | null;
            if (avatarEl) {
                if (resourceLoader.isImageCached(sourcePost.account.avatar)) {
                    updates.push(() => {
                        avatarEl.src = `${corsProxy}${sourcePost.account.avatar}`;
                    });
                } else {
                    updates.push(() => {
                        avatarEl.src = '/favicon.svg';
                    });
                }
            }

            const displayNameEl = document.getElementById('style-a-display-name') as HTMLDivElement | null;
            if (displayNameEl) {
                let displayName = sourcePost.account.display_name;
                if (sourcePost.account.emojis) {
                    sourcePost.account.emojis.forEach(emoji => {
                        const regex = new RegExp(`:${emoji.shortcode}:`, 'g');
                        const proxiedUrl = `${corsProxy}${emoji.url}`;

                        if (resourceLoader.isImageCached(emoji.url)) {
                            displayName = displayName.replace(regex, `<img src="${proxiedUrl}" alt=":${emoji.shortcode}:" class="custom-emoji" crossorigin="anonymous">`);
                        } else {
                            displayName = displayName.replace(regex, `:${emoji.shortcode}:`);
                        }
                    });
                }
                updates.push(() => {
                    displayNameEl.innerHTML = displayName;
                });
            }

            const usernameEl = document.getElementById('style-a-username') as HTMLDivElement | null;
            if (usernameEl) {
                let fullAcct = sourcePost.account.acct;
                let usernamePart = fullAcct.includes('@') ? fullAcct.split('@')[0] : fullAcct;
                let instancePart = fullAcct.includes('@') ? fullAcct.split('@').slice(1).join('@') : fetchedInstance;
                let displayUsername = `@${usernamePart}`;
                if (visibility.instance && instancePart) {
                    displayUsername += `@${instancePart}`;
                }
                updates.push(() => {
                    usernameEl.textContent = displayUsername;
                    usernameEl.style.display = 'block';
                });
            }

            const contentEl = document.getElementById('style-a-content') as HTMLDivElement | null;
            if (contentEl) {
                updates.push(() => {
                    contentEl.innerHTML = content;
                });
            }

            updates.forEach(update => update());

            updateMediaAttachments(sourcePost.media_attachments);

            updateFooterSection(sourcePost, visibility, formattedTime, formattedDate);

            setPreviewState('content');
        }

        function updateMediaAttachments(mediaAttachments: any[]) {
            const attachmentContainer = document.getElementById('style-a-attachment') as HTMLDivElement | null;
            if (!attachmentContainer) return;

            attachmentContainer.innerHTML = '';
            attachmentContainer.className = 'mt-3 rounded-lg overflow-hidden border bg-gray-100';

            if (mediaAttachments.length > 0) {
                attachmentContainer.style.display = 'grid';
                attachmentContainer.classList.add('gap-px');

                const attachmentsToDisplay = mediaAttachments.slice(0, 4);

                switch (attachmentsToDisplay.length) {
                    case 1:
                        attachmentContainer.style.gridTemplateColumns = '1fr';
                        break;
                    case 2:
                        attachmentContainer.style.gridTemplateColumns = '1fr 1fr';
                        break;
                    case 3:
                        attachmentContainer.style.gridTemplateColumns = '1fr 1fr';
                        break;
                    case 4:
                        attachmentContainer.style.gridTemplateColumns = '1fr 1fr';
                        break;
                }

                const corsProxy = 'https://cors.eu.org/';

                const fragment = document.createDocumentFragment();

                attachmentsToDisplay.forEach((attachment: any, index: number) => {
                    const imgWrapper = document.createElement('div');
                    imgWrapper.className = 'overflow-hidden relative';

                    let imageUrl: string;
                    if (attachment.type === 'image') {
                        imageUrl = attachment.url;
                    } else {
                        imageUrl = attachment.preview_url || attachment.url;
                    }

                    const isImagePreloaded = resourceLoader.isImageCached(imageUrl);

                    if (isImagePreloaded) {
                        const img = document.createElement('img');
                        img.crossOrigin = 'anonymous';
                        img.alt = attachment.description || `Post attachment ${index + 1}`;
                        img.className = 'w-full h-full object-cover';
                        img.src = `${corsProxy}${imageUrl}`;
                        imgWrapper.appendChild(img);
                    } else {
                        const placeholder = document.createElement('div');
                        placeholder.className = 'w-full h-full bg-gray-200 flex items-center justify-center text-gray-500';
                        placeholder.innerHTML = `
                            <div class="text-center">
                                <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                </svg>
                                <p class="text-xs">Image not available</p>
                            </div>
                        `;
                        imgWrapper.appendChild(placeholder);
                    }

                    if (attachment.type === 'gifv') {
                        const gifIndicator = document.createElement('div');
                        gifIndicator.className = 'absolute top-2 right-2 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded';
                        gifIndicator.textContent = 'GIF';
                        imgWrapper.appendChild(gifIndicator);
                    } else if (attachment.type === 'video') {
                        const videoIndicator = document.createElement('div');
                        videoIndicator.className = 'absolute top-2 right-2 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded flex items-center';
                        videoIndicator.innerHTML = `
                            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v8a2 2 0 01-2 2h-2a2 2 0 01-2-2V6z"/>
                            </svg>
                            Video
                        `;
                        imgWrapper.appendChild(videoIndicator);
                    }

                    if (attachmentsToDisplay.length === 3 && index === 0) {
                        imgWrapper.style.gridRow = 'span 2 / span 2';
                    }

                    fragment.appendChild(imgWrapper);
                });

                attachmentContainer.appendChild(fragment);
            } else {
                attachmentContainer.style.display = 'none';
            }
        }

        function updateFooterSection(sourcePost: any, visibility: any, formattedTime: string, formattedDate: string) {
            const bottomSection = document.getElementById('bottom-section') as HTMLDivElement | null;
            const timestampEl = document.getElementById('style-a-timestamp') as HTMLDivElement | null;
            const statsEl = document.getElementById('style-a-stats') as HTMLDivElement | null;

            if (timestampEl) {
                timestampEl.textContent = `${formattedTime} · ${formattedDate}`;
                timestampEl.style.display = visibility.timestamp ? 'block' : 'none';
                timestampEl.style.marginBottom = (visibility.timestamp && visibility.stats) ? '0.75rem' : '0';
            }

            const repliesEl = document.getElementById('style-a-replies') as HTMLSpanElement | null;
            const boostsEl = document.getElementById('style-a-boosts') as HTMLSpanElement | null;
            const favsEl = document.getElementById('style-a-favs') as HTMLSpanElement | null;

            if (repliesEl) repliesEl.textContent = sourcePost.replies_count;
            if (boostsEl) boostsEl.textContent = sourcePost.reblogs_count;
            if (favsEl) favsEl.textContent = sourcePost.favourites_count;

            if (statsEl) {
                statsEl.style.display = visibility.stats ? 'flex' : 'none';
            }

            const shouldShowBottomSection = visibility.timestamp || visibility.stats;
            if (bottomSection) {
                bottomSection.style.display = shouldShowBottomSection ? 'block' : 'none';
                bottomSection.style.borderTopWidth = shouldShowBottomSection ? '1px' : '0';
                bottomSection.style.paddingTop = shouldShowBottomSection ? '1rem' : '0';

                if (!visibility.timestamp && !visibility.stats) {
                    bottomSection.style.paddingTop = '0';
                    bottomSection.style.borderTopWidth = '0';
                } else if (!visibility.timestamp && visibility.stats) {
                    bottomSection.style.paddingTop = '1rem';
                }
            }
        }

        urlInput?.addEventListener('focus', () => {
            if (typeof htmlToImage === 'undefined') {
                const script = document.createElement('script');
                script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.min.js';
                script.integrity = 'sha512-7tWCgq9tTYS/QkGVyKrtLpqAoMV9XIUxoou+sPUypsaZx56cYR/qio84fPK9EvJJtKvJEwt7vkn6je5UVzGevw==';
                script.crossOrigin = 'anonymous';
                script.referrerPolicy = 'no-referrer';
                document.head.appendChild(script);
            }
        }, { once: true, passive: true });
    });
    </script>

    <style>
        .rotate-180 {
            transform: rotate(180deg);
        }

        .accordion-content {
            transition: all 0.3s ease-in-out;
            transform-origin: top;
        }

        .accordion-content.hidden {
            max-height: 0;
            opacity: 0;
            transform: scaleY(0);
            overflow: hidden;
        }

        .accordion-content:not(.hidden) {
            max-height: 500px;
            opacity: 1;
            transform: scaleY(1);
        }

        .loader {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .template-classic {
            background: white;
            border-color: #e5e7eb;
        }

        .template-magazine {
            background: #faf8f5;
            border-color: #e8e4de;
            font-family: 'Georgia', 'Times New Roman', serif;
        }

        .template-dark {
            background: #2d3748;
            border-color: #4a5568;
            color: #ffffff;
        }

        .template-dark .text-primary {
            color: #ffffff !important;
        }

        .template-dark .text-secondary {
            color: #cccccc !important;
        }

        .template-dark img {
            border: none !important;
        }

        .template-dark #style-a-attachment {
            background: #374151 !important;
            border-color: #4a5568 !important;
        }

        .template-dark #bottom-section {
            border-color: #4a5568 !important;
        }

        .template-magazine-dark {
            background: #2d3748;
            border-color: #4a5568;
            color: #ffffff;
            font-family: 'Georgia', 'Times New Roman', serif;
        }

        .template-magazine-dark .text-primary {
            color: #ffffff !important;
        }

        .template-magazine-dark .text-secondary {
            color: #cccccc !important;
        }

        .template-magazine-dark img {
            border: none !important;
        }

        .template-magazine-dark #style-a-attachment {
            background: #374151 !important;
            border-color: #4a5568 !important;
        }

        .template-magazine-dark #bottom-section {
            border-color: #4a5568 !important;
        }

        .custom-emoji {
            width: 16px;
            height: 16px;
            vertical-align: middle;
            margin: 0 1px;
        }

        #style-a-avatar {
            border-radius: 8px;
        }

        .template-dark #style-a-avatar {
            border-radius: 8px;
        }

        #style-a-attachment img {
            border-radius: 8px;
        }

        .template-dark #style-a-attachment img {
            border-radius: 8px;
        }

        @media (max-width: 768px) {
            .preview-card {
                padding: 1rem;
            }
        }
    </style>
</Layout>
