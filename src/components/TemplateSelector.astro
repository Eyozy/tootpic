---
import { Image } from 'astro:assets';
import classicLight from '../assets/templates/classic-light.svg';
import classicDark from '../assets/templates/classic-dark.svg';
import magazineLight from '../assets/templates/magazine-light.svg';
import magazineDark from '../assets/templates/magazine-dark.svg';

interface Props {
  selectedTemplateId?: string;
}

const { selectedTemplateId = 'classic' } = Astro.props;
---

<!-- Template Modal -->
<div id="template-modal" class="template-modal hidden" role="dialog" aria-modal="true" aria-labelledby="modal-title">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h2 id="modal-title" class="modal-title">Choose Template</h2>
      <button type="button" id="modal-close" class="modal-close" aria-label="Close modal">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>

    <div class="modal-body">
      <!-- Layout Selection Area -->
      <div class="layout-section">
        <div class="section-title">Layout</div>
        <div class="layout-grid">
          <!-- Classic Layout -->
          <div
            class="layout-option"
            data-layout="classic"
            role="button"
            tabindex="0"
            aria-pressed="false"
          >
            <div class="layout-preview">
              <div class="layout-schematic layout-classic-light">
                <Image src={classicLight} alt="Classic light theme preview" />
              </div>
              <div class="layout-schematic layout-classic-dark hidden">
                <Image src={classicDark} alt="Classic dark theme preview" />
              </div>
            </div>
            <div class="layout-info">
              <div class="layout-name">Classic</div>
              <div class="layout-description">Classic card style with elegant and clean presentation</div>
            </div>
          </div>

          <!-- Magazine Layout -->
          <div
            class="layout-option"
            data-layout="magazine"
            role="button"
            tabindex="0"
            aria-pressed="false"
          >
            <div class="layout-preview">
              <div class="layout-schematic layout-magazine-light">
                 <Image src={magazineLight} alt="Magazine light theme preview" />
              </div>
              <div class="layout-schematic layout-magazine-dark hidden">
                <Image src={magazineDark} alt="Magazine dark theme preview" />
              </div>
            </div>
            <div class="layout-info">
              <div class="layout-name">Magazine</div>
              <div class="layout-description">Professional magazine layout with featured articles</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Appearance Selection Area -->
      <div class="appearance-section">
        <div class="section-title">Appearance</div>
        <div class="appearance-options">
          <label class="appearance-option">
            <input type="radio" id="appearance-light" name="appearance" value="light" checked>
            <span class="appearance-radio"></span>
            <span class="appearance-label">Light</span>
          </label>
          <label class="appearance-option">
            <input type="radio" id="appearance-dark" name="appearance" value="dark">
            <span class="appearance-radio"></span>
            <span class="appearance-label">Dark</span>
          </label>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { templateManager } from '../utils/templateManager';
  import '../styles/template-selector.css';

  document.addEventListener('openTemplateModalEvent', () => {
    templateManager.openModal();
    templateManager.initializeSelections();
  });

  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      templateManager.initializeSelections();
    }, 100);
  });
</script>